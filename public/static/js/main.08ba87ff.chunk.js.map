{"version":3,"sources":["components/Navbar.js","components/Home.js","components/ProductDetails.js","components/ProductList.js","components/Cart.js","components/Terms.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Home","ProductDetails","data-instance-id","ProductList","Cart","Terms","App","console","log","process","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PA2BeA,MAzBf,WACI,OACI,yBAAKC,UAAU,+CACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,WACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMP,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BQ,GAAG,iBACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAE1C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,aAA7B,aAEJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,SAA7B,aCTTQ,MARf,WACI,OACI,6BACI,0CCMGC,MATf,WACI,OACI,6BACI,8CACA,6CAAyBC,mBAAiB,uBCIvCC,MARf,WACI,OACI,6BACI,6CCKGC,MARf,WACI,OACI,6BACI,sCCKGC,MARf,WACI,OACI,6BACI,uC,MCsBGC,MAhBf,WAEE,OADAC,QAAQC,IAAIC,qCAEV,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAASA,MACjD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAAgBA,MAChE,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAAmBA,MACjE,kBAAC,IAAD,CAAOF,KAAK,QAAQC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAASA,MAC/C,kBAAC,IAAD,CAAOF,KAAK,SAASC,OAAQ,SAAAC,GAAK,OAAI,kBAAC,EAAUA,SCTrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.08ba87ff.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">My Site</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/products\">Products</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/cart\">Cart</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nfunction Home() {\n    return (\n        <div>\n            <h1>Homepage</h1>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\n\nfunction ProductDetails() {\n    return (\n        <div>\n            <h1>ProductDetails</h1>\n            <klarna-instant-shopping data-instance-id=\"button-123abc456\" />\n        </div>\n    )\n}\n\nexport default ProductDetails\n","import React from 'react'\n\nfunction ProductList() {\n    return (\n        <div>\n            <h1>ProductList</h1>\n        </div>\n    )\n}\n\nexport default ProductList\n","import React from 'react'\n\nfunction Cart() {\n    return (\n        <div>\n            <h1>Cart</h1>\n        </div>\n    )\n}\n\nexport default Cart\n","import React from 'react'\n\nfunction Terms() {\n    return (\n        <div>\n            <h1>Terms</h1>\n        </div>\n    )\n}\n\nexport default Terms\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport ProductDetails from './components/ProductDetails'\nimport ProductList from './components/ProductList'\nimport Cart from './components/Cart'\nimport Terms from './components/Terms'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  console.log(process.env.REACT_APP_KLARNA_BASE_URL)\n  return (\n    <div>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\" render={props => <Home {...props} />} />\n        <Route exact path=\"/products\" render={props => <ProductList {...props} />} />\n        <Route path=\"/products/:id\" render={props => <ProductDetails {...props} />} />\n        <Route path=\"/cart\" render={props => <Cart {...props} />} />\n        <Route path=\"/terms\" render={props => <Terms {...props} />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}